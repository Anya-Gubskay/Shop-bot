import logging
import re
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

API_TOKEN = os.getenv("API_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists("data.json"):
        with open("data.json", "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
categories = load_data()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–≤–∞—Ä–æ–≤
if not categories:
    categories = {
        "t-shirts": {
            "name": "üëï –§—É—Ç–±–æ–ª–∫–∏",
            "products": [
                {
                    "name": "–§—É—Ç–±–æ–ª–∫–∞ –±–µ–ª–∞—è",
                    "price": 1000,
                    "description": "–ú—è–≥–∫–∞—è –∏ —É–¥–æ–±–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞.",
                    "photo_path": "images/t-shirt1.jpg"
                },
                {
                    "name": "–§—É—Ç–±–æ–ª–∫–∞ —á–µ—Ä–Ω–∞—è",
                    "price": 1200,
                    "description": "–°—Ç–∏–ª—å–Ω–∞—è —á–µ—Ä–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞.",
                    "photo_path": "images/t-shirt2.jpg"
                }
            ]
        },
        "jeans": {
            "name": "üëñ –î–∂–∏–Ω—Å—ã",
            "products": [
                {
                    "name": "–î–∂–∏–Ω—Å—ã —Å–∏–Ω–∏–µ",
                    "price": 2000,
                    "description": "–°—Ç–∏–ª—å–Ω—ã–µ —Å–∏–Ω–∏–µ –¥–∂–∏–Ω—Å—ã.",
                    "photo_path": "images/jeans1.jpg"
                },
                {
                    "name": "–î–∂–∏–Ω—Å—ã —á–µ—Ä–Ω—ã–µ",
                    "price": 2200,
                    "description": "–°—Ç–∏–ª—å–Ω—ã–µ —á–µ—Ä–Ω—ã–µ –¥–∂–∏–Ω—Å—ã.",
                    "photo_path": "images/jeans2.jpg"
                }
            ]
        },
        "shorts": {
            "name": "ü©≥ –®–æ—Ä—Ç—ã",
            "products": [
                {
                    "name": "–®–æ—Ä—Ç—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ",
                    "price": 1500,
                    "description": "–£–¥–æ–±–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —à–æ—Ä—Ç—ã.",
                    "photo_path": "images/shorts1.jpg"
                },
                {
                    "name": "–®–æ—Ä—Ç—ã –¥–∂–∏–Ω—Å–æ–≤—ã–µ",
                    "price": 1800,
                    "description": "–°—Ç–∏–ª—å–Ω—ã–µ –¥–∂–∏–Ω—Å–æ–≤—ã–µ —à–æ—Ä—Ç—ã.",
                    "photo_path": "images/shorts2.jpg"
                }
            ]
        }
    }
    save_data(categories)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª

user_carts = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_kb():
    buttons = [[KeyboardButton(text=category["name"])] for category in categories.values()]
    buttons.append([KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")])
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_products_kb(category_key: str):
    products = categories[category_key]["products"]
    buttons = [[KeyboardButton(text=product["name"])] for product in products]
    buttons.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)

class OrderForm(StatesGroup):
    name = State()
    phone = State()
    address = State()
    comment = State()

class QuantityForm(StatesGroup):
    quantity = State()

class AddProductForm(StatesGroup):
    category = State()
    name = State()
    price = State()
    description = State()
    photo = State()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
def get_add_to_cart_kb(category_key: str, product_name: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõçÔ∏è", callback_data=f"add_{category_key}_{product_name}")]
    ])

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_kb())

@dp.message(lambda message: message.text in [category["name"] for category in categories.values()])
async def handle_category_selection(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    if message.from_user.id == ADMIN_ID and await state.get_state() == AddProductForm.category:
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –æ–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        category_key = next((key for key, category in categories.items() if category["name"] == message.text), None)
        if not category_key:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(category=category_key)
        await state.set_state(AddProductForm.name)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**:")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_key = next((key for key, category in categories.items() if category["name"] == message.text), None)
        if category_key:
            await message.answer(f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {categories[category_key]['name']}:")

            for product in categories[category_key]["products"]:
                photo = FSInputFile(product["photo_path"])
                await message.answer_photo(
                    photo=photo,
                    caption=f"{product['name']}\n{product['description']}\nüí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.",
                    reply_markup=get_add_to_cart_kb(category_key, product['name'])
                )

@dp.message(lambda message: any(product["name"] == message.text for category in categories.values() for product in category["products"]))
async def show_product(message: types.Message):
    for category_key, category in categories.items():
        for product in category["products"]:
            if product["name"] == message.text:
                photo = FSInputFile(product["photo_path"])
                await message.answer_photo(
                    photo=photo,
                    caption=f"{product['name']}\n{product['description']}\n–¶–µ–Ω–∞: {product['price']} —Ä—É–±.",
                    reply_markup=get_add_to_cart_kb(category_key, product['name'])
                )
                return

@dp.callback_query(lambda query: query.data.startswith("add_"))
async def add_to_cart(query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = query.data.split("_")
    category_key = data[1]
    product_name = data[2] if len(data) > 2 else None

    logger.info(f"Category key: {category_key}, Product name: {product_name}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(category_key=category_key, product_name=product_name)
    await state.set_state(QuantityForm.quantity)
    await query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")

@dp.message(QuantityForm.quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
        return

    data = await state.get_data()
    category_key = data["category_key"]
    product_name = data["product_name"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    user_id = message.from_user.id

    if user_id not in user_carts:
        user_carts[user_id] = []

    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    product = next((product for product in categories[category_key]["products"] if product["name"] == product_name), None)
    if product:
        user_carts[user_id].append({
            "product": product,
            "quantity": quantity
        })
        await message.answer(f"‚úÖ {product['name']} (x{quantity}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    else:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()

@dp.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    cart_items = user_carts.get(user_id, [])
    if not cart_items:
        await message.answer("üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total_price = sum(item["product"]["price"] * item["quantity"] for item in cart_items)
    cart_text = "üõí **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n" + "\n".join(
        f"üîπ {item['product']['name']} (x{item['quantity']}) - {item['product']['price'] * item['quantity']} —Ä—É–±."
        for item in cart_items
    )
    
    await message.answer(f"{cart_text}\nüí∞ **–û–±—â–∞—è —Å—É–º–º–∞:** {total_price} —Ä—É–±.")

@dp.message(lambda message: message.text == "üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cart_items = user_carts.get(user_id, [])
    if not cart_items:
        await message.answer("üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    await state.set_state(OrderForm.name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–§–ò–û**:")

@dp.message(OrderForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderForm.phone)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**:")

# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ë–µ–ª–∞—Ä—É—Å–∏ (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è)
def is_valid_belarus_phone(phone: str) -> bool:
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned_phone = re.sub(r"[^0-9]", "", phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 375, 80 –∏–ª–∏ 29 –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if cleaned_phone.startswith("375") and len(cleaned_phone) == 12:
        return True
    elif cleaned_phone.startswith("80") and len(cleaned_phone) == 11:
        return True
    elif cleaned_phone.startswith("29") and len(cleaned_phone) == 9:
        return True
    return False

@dp.message(OrderForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    if not is_valid_belarus_phone(phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑.")
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É +375 (XX) XXX-XX-XX
    cleaned_phone = re.sub(r"[^0-9]", "", phone)
    if cleaned_phone.startswith("80"):
        cleaned_phone = "375" + cleaned_phone[2:]
    elif cleaned_phone.startswith("29"):
        cleaned_phone = "375" + cleaned_phone

    formatted_phone = f"+375 ({cleaned_phone[3:5]}) {cleaned_phone[5:8]}-{cleaned_phone[8:10]}-{cleaned_phone[10:]}"
    await state.update_data(phone=formatted_phone)
    await state.set_state(OrderForm.address)
    await message.answer("üè° –í–≤–µ–¥–∏—Ç–µ –≤–∞—à **–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**:")

@dp.message(OrderForm.address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(OrderForm.comment)
    await message.answer("‚úèÔ∏è –î–æ–±–∞–≤—å—Ç–µ **–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π** (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ -, –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è):")

@dp.message(OrderForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cart_items = user_carts.get(user_id, [])
    data = await state.get_data()
    comment = message.text if message.text != "-" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

    order_text = (f"üõçÔ∏è **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\nüë§ –§–ò–û: {data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                  f"üè° –ê–¥—Ä–µ—Å: {data['address']}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
                  f"**–¢–æ–≤–∞—Ä—ã:**\n" + "\n".join(
                      f"üîπ {item['product']['name']} (x{item['quantity']}) - {item['product']['price'] * item['quantity']} —Ä—É–±."
                      for item in cart_items
                  ) + f"\nüí∞ **–û–±—â–∞—è —Å—É–º–º–∞:** {sum(item['product']['price'] * item['quantity'] for item in cart_items)} —Ä—É–±.")

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")]
    ])
    
    await bot.send_message(ADMIN_ID, order_text, reply_markup=confirm_kb)
    await message.answer("üì© **–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!**")
    await state.clear()

@dp.callback_query(lambda query: query.data == "confirm_order")
async def confirm_order(query: types.CallbackQuery):
    await query.message.edit_text(query.message.text + "\n‚úÖ **–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**")
    await query.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
@dp.message(Command("add_product"))
async def start_add_product(message: types.Message, state: FSMContext):
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ + –∫–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    buttons = [[KeyboardButton(text=category["name"])] for category in categories.values()]
    buttons.append([KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")])
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)

    await state.set_state(AddProductForm.category)
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:", reply_markup=kb)

@dp.message(AddProductForm.category)
async def handle_category_selection(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data.get("awaiting_new_category"):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        new_category_key = message.text.lower().replace(" ", "_")
        categories[new_category_key] = {
            "name": message.text,
            "products": []
        }

        await state.update_data(category=new_category_key, awaiting_new_category=False)
        await state.set_state(AddProductForm.name)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è **{message.text}** —Å–æ–∑–¥–∞–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**:")
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    if message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.update_data(awaiting_new_category=True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    category_key = next((key for key, category in categories.items() if category["name"] == message.text), None)
    if not category_key:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(category=category_key)
    await state.set_state(AddProductForm.name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**:")
    
@dp.message(AddProductForm.name)
async def process_product_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await state.update_data(name=message.text)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
    await state.set_state(AddProductForm.price)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ **—Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞** (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message(AddProductForm.price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
        return

    await state.update_data(price=price)
    await state.set_state(AddProductForm.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ **–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**:")

@dp.message(AddProductForm.description)
async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProductForm.photo)
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ **—Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞**:")

@dp.message(AddProductForm.photo)
async def process_product_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_file = await bot.get_file(message.photo[-1].file_id)
    photo_path = f"images/{photo_file.file_id}.jpg"
    await bot.download_file(photo_file.file_path, photo_path)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    category = data.get("category")  # –ë–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    if not category or category not in categories:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    categories[category]["products"].append({
        "name": data["name"],
        "price": data["price"],
        "description": data["description"],
        "photo_path": photo_path
    })

    save_data(categories)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª

    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä **{data['name']}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}!", reply_markup=get_main_kb())
    await state.clear()

if __name__ == '__main__':
    dp.run_polling(bot)